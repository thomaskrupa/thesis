% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/obj_func_Constraint1.R
\name{Obj.func_and_con}
\alias{Obj.func_and_con}
\title{Obj.func_Constraint1}
\usage{
Obj.func_and_con(
  i_loop,
  direction,
  Input,
  Output,
  Link,
  Amount_Input,
  Amount_Output,
  Amount_Link,
  K,
  N,
  sum_m,
  sum_r,
  sum_l,
  weights,
  Link_obj
)
}
\arguments{
\item{i_loop}{Integer containing the current DMU where the NSBM approach is.}

\item{direction}{String which contains the orientation of the problem (e.g. "non", "input" or "output").}

\item{Input}{Matrix with the data of the input variables.}

\item{Output}{Matrix with the data of the output variables.}

\item{Link}{Matrix with the data of the Link variables.}

\item{Amount_Input}{Vector containing the number of input variables of each division.}

\item{Amount_Output}{Vector containing the number of output variables of each division.}

\item{Amount_Link}{Vector containing the number of link variables between the divisions.}

\item{K}{Integer which contains the number of division.}

\item{N}{Integer which contains the total amount of the DMU's.}

\item{sum_m}{Integer which included the total number of all input variables.}

\item{sum_r}{Integer which included the total number of all output variables.}

\item{sum_l}{Integer which included the total number of all link variables.}

\item{weights}{Vector which contains the weights of each division K.}

\item{Link_obj}{Flag which is 0 for no link variable in the objective function 1 otherwise.}
}
\value{
Return a list
\itemize{
      \item FOBJ - Matrix which contains the objective function of the nsbm approach.
      \item FCON - Matrix which contains the first constraint for the nsbm approach.
}
}
\description{
The Obj.func_Constraint1 function creates the objective function and the first constraint for the nsbm approach.
}
\examples{
i = 1
dir = "non"
Input = matrix(c(3, 8,7, 4,2, 3), byrow = TRUE, nrow = 3)
Output = matrix(c(5, 1,1, 5,5, 2), byrow = TRUE, nrow = 3)
Link = matrix(c(1,2,3), byrow = TRUE, nrow = 3)
Amount_In = c(1,1)
Amount_Out = c(1,1)
Amount_Li = c(1)
K = 2
N = 3
sum_m = 2
sum_r = 2
sum_l = 1
weights = c(0.5, 0.5)
Link_obj = 0
Obj.func_and_con(i, dir, Input, Output, Link, Amount_In, Amount_Out,
Amount_Li, K, N, sum_m, sum_r, sum_l, weights, Link_obj)
}
